const value = {
    offerer: offerer,
    zone: "0x0000000000000000000000000000000000000000",
    offer: [
      {
        itemType: 2,
        token: collectionAddress,
        identifierOrCriteria: tokenId,
        startAmount: 1,
        endAmount: 1,
      },
    ],
    consideration: [
      {
        itemType: 0,
        token: "0x0000000000000000000000000000000000000000",
        identifierOrCriteria: 0,
        startAmount: (startAmountBigInt - openSeaFee).toString(),
        endAmount: (startAmountBigInt - openSeaFee).toString(),
        recipient: offerrer,
      },
      {
        itemType: 0,
        token: "0x0000000000000000000000000000000000000000",
        identifierOrCriteria: 0,
        startAmount: openSeaFee.toString(),
        endAmount: openSeaFee.toString(),
        recipient: "0x0000a26b00c1f0df003000390027140000faa719",
      },
    ],
    orderType: 0,
    startTime: time.toString(),
    endTime: endTime.toString(),
    zoneHash:
      "0x0000000000000000000000000000000000000000000000000000000000000000",
    salt: (Math.random() * 10 ** 18).toString(),
    conduitKey:
      "0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000",
    totalOriginalConsiderationItems: 2,
  };
const signature = await signer.signTypedData(domain, types, value);
  const params = {
    parameters: {
      ...value,
      counter: 0,
    },
    signature: signature,
    protocol_address: protocolAddress,
  };

  const options = {
    method: "POST",
    headers: { accept: "application/json", "content-type": "application/json" },

    body: JSON.stringify(params),
  };

  fetch(
    "https://testnets-api.opensea.io/api/v2/orders/sepolia/seaport/listings",
    options
  )
    .then((response) => response.json())
    .then((response) => console.log(response))
    .catch((err) => console.error(err));